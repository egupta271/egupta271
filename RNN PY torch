import torch
import torch.nn as nn
import torch.optim as optim

# Generate synthetic sequential data
sequence_length = 5
X = torch.randn(100, sequence_length, 10)
y = torch.randint(0, 2, (100,))

# Define an RNN model
class SimpleRNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(SimpleRNN, self).__init__()
        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        out, _ = self.rnn(x)
        out = self.fc(out[:, -1, :])
        return out

# Instantiate the model
rnn_model = SimpleRNN(input_size=10, hidden_size=32, output_size=2)

# Define loss and optimizer
criterion_rnn = nn.CrossEntropyLoss()
optimizer_rnn = optim.SGD(rnn_model.parameters(), lr=0.01)

# Training loop
for epoch in range(100):
    optimizer_rnn.zero_grad()
    outputs_rnn = rnn_model(X)
    loss_rnn = criterion_rnn(outputs_rnn, y)
    loss_rnn.backward()
    optimizer_rnn.step()
